{
  "compilerOptions": {
    "moduleResolution": "Node", // Possible values: "Node", "Node16", "NodeNext"
    "target": "ESNext", // default value is "ES3"
    "module": "ESNext",
    "jsx": "react-jsx", // You previously used react, but since upgrading from vite 3 to vite 4, you need to use the react-jsx option to solve the error of "'React' refers to a UMD global, but the current file is a module. Consider adding an import instead. ts(2686)"
    "ignoreDeprecations": "5.0",
    "isolatedModules": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "resolveJsonModule": true,
    // "emitDeclarationOnly": true,
    "declaration": true, // <--- Generate .d.ts files for every TypeScript or JavaScript file inside your project. These .d.ts files are type definition files which describe the external API of your module. With .d.ts files, tools like TypeScript can provide intellisense and accurate types for un-typed code.
    "noEmit": true, // <--- Do not emit compiler output files like JavaScript source code, source-maps or declarations. This makes room for another tool like Babel, or swc to handle converting the TypeScript file to a file which can run inside a JavaScript environment. You can then use TypeScript as a tool for providing editor integration, and as a source code type-checker.
    "forceConsistentCasingInFileNames": true,
    "lib": ["ES2022", "DOM"], // adding the "DOM" library helps vs-code to recognize the window & document objects.
    "checkJs": true, // without it? this config file would not apply to js/jsx files.
    "sourceMap": true, // default value is false
    "noImplicitOverride": true, // If you use inheritance, and you provide an override function, you must specify that it is an override function.
    "baseUrl": "./",
    "allowSyntheticDefaultImports": true,
    // "outDir": "./dist", // no need to have this! all the microservices are being used just as they are, and the only thing being bundled is the app-frontend, which gets bundled using vite, which already has an outDir set in its config file.
    "paths": {},
    "typeRoots": ["node_modules/@types"]
  },
  "compileOnSave": true,
  "exclude": ["node_modules", "<node_internals>/**", "bin/**"],
  "include": ["**/*/*.ts", "**/*.d.ts", "**/*.js", "**/*.jsx", "**/*.cjs", "*.ts", "*.d.ts", "*.js", "*.jsx", "*.cjs"]
}
